From 732e236d54900bd4445fea9fabe8257053390e2e Mon Sep 17 00:00:00 2001
From: DmytroNiehrii <Dmytro.Niehrii@playtech.com>
Date: Mon, 23 Jul 2018 13:01:50 +0300
Subject: [PATCH 1/2] Initial-commit
XOV: XO_0_0_1

---
 gradlew                                                                   | 0
 .../java/com/crossover/techtrial/exceptions/GlobalExceptionHandler.java   | 0
 src/main/resources/db/changelog/db.changelog-1.0.xml                      | 0
 src/main/resources/db/changelog/db.changelog-master.xml                   | 0
 4 files changed, 0 insertions(+), 0 deletions(-)
 mode change 100755 => 100644 gradlew
 mode change 100755 => 100644 src/main/java/com/crossover/techtrial/exceptions/GlobalExceptionHandler.java
 mode change 100755 => 100644 src/main/resources/db/changelog/db.changelog-1.0.xml
 mode change 100755 => 100644 src/main/resources/db/changelog/db.changelog-master.xml

diff --git a/gradlew b/gradlew
old mode 100755
new mode 100644
diff --git a/src/main/java/com/crossover/techtrial/exceptions/GlobalExceptionHandler.java b/src/main/java/com/crossover/techtrial/exceptions/GlobalExceptionHandler.java
old mode 100755
new mode 100644
diff --git a/src/main/resources/db/changelog/db.changelog-1.0.xml b/src/main/resources/db/changelog/db.changelog-1.0.xml
old mode 100755
new mode 100644
diff --git a/src/main/resources/db/changelog/db.changelog-master.xml b/src/main/resources/db/changelog/db.changelog-master.xml
old mode 100755
new mode 100644
-- 
2.9.0.windows.1


From e976a1043a98bf6b651c2b122bdd65272e232600 Mon Sep 17 00:00:00 2001
From: DmytroNiehrii <Dmytro.Niehrii@playtech.com>
Date: Mon, 23 Jul 2018 13:09:34 +0300
Subject: [PATCH 2/2] My submission
XOV: XO_0_0_1

---
 build.gradle                                       |  18 +++-
 .../batch/DailyElectricityAggregatorJob.java       |  84 +++++++++++++++
 .../techtrial/batch/InitialProcessJob.java         | 119 ++++++++++++++++++++
 .../techtrial/config/SchedulerConfiguration.java   |  33 ++++++
 .../techtrial/controller/PanelController.java      |  97 +++++++++--------
 .../techtrial/dto/DailyElectricityDTO.java         | 101 +++++++++++++++++
 .../exceptions/GlobalExceptionHandler.java         |  17 ++-
 .../techtrial/model/DailyElectricity.java          |  54 ++++++++++
 .../crossover/techtrial/model/InitialProcess.java  |  32 ++++++
 .../techtrial/model/InitialProcessStatus.java      |  11 ++
 .../java/com/crossover/techtrial/model/Panel.java  |  37 ++++---
 .../repository/DailyElectricityRepository.java     |  11 ++
 .../repository/HourlyElectricityRepository.java    |  16 ++-
 .../repository/InitialProcessRepository.java       |  11 ++
 .../techtrial/repository/PanelRepository.java      |  13 ++-
 .../techtrial/service/DailyElectricityService.java |  17 +++
 .../service/DailyElectricityServiceImpl.java       |  55 ++++++++++
 .../service/HourlyElectricityService.java          |  17 ++-
 .../service/HourlyElectricityServiceImpl.java      |  42 ++++++--
 .../crossover/techtrial/service/PanelService.java  |  26 +++--
 .../techtrial/service/PanelServiceImpl.java        |  38 +++++--
 .../exceptions/ResourceNotFoundException.java      |   8 ++
 src/main/resources/application.properties          |   8 +-
 .../resources/db/changelog/db.changelog-2.0.xml    |  48 +++++++++
 .../resources/db/changelog/db.changelog-3.0.xml    |  15 +++
 .../resources/db/changelog/db.changelog-4.0.xml    |  12 +++
 .../resources/db/changelog/db.changelog-master.xml |   3 +
 .../batch/DailyElectricityAggregatorJobTest.java   |  49 +++++++++
 .../techtrial/controller/PanelControllerTest.java  | 120 +++++++++++++++------
 .../service/DailyElectricityServiceTest.java       |  73 +++++++++++++
 .../service/HourlyElectricityServiceTest.java      |  75 +++++++++++++
 .../techtrial/service/PanelServiceTest.java        |  64 +++++++++++
 .../com/crossover/techtrial/utils/TestUtils.java   |  51 +++++++++
 src/test/resources/application.properties          |   3 +
 34 files changed, 1231 insertions(+), 147 deletions(-)
 create mode 100644 src/main/java/com/crossover/techtrial/batch/DailyElectricityAggregatorJob.java
 create mode 100644 src/main/java/com/crossover/techtrial/batch/InitialProcessJob.java
 create mode 100644 src/main/java/com/crossover/techtrial/config/SchedulerConfiguration.java
 create mode 100644 src/main/java/com/crossover/techtrial/dto/DailyElectricityDTO.java
 create mode 100644 src/main/java/com/crossover/techtrial/model/DailyElectricity.java
 create mode 100644 src/main/java/com/crossover/techtrial/model/InitialProcess.java
 create mode 100644 src/main/java/com/crossover/techtrial/model/InitialProcessStatus.java
 create mode 100644 src/main/java/com/crossover/techtrial/repository/DailyElectricityRepository.java
 create mode 100644 src/main/java/com/crossover/techtrial/repository/InitialProcessRepository.java
 create mode 100644 src/main/java/com/crossover/techtrial/service/DailyElectricityService.java
 create mode 100644 src/main/java/com/crossover/techtrial/service/DailyElectricityServiceImpl.java
 create mode 100644 src/main/java/com/crossover/techtrial/service/exceptions/ResourceNotFoundException.java
 create mode 100644 src/main/resources/db/changelog/db.changelog-2.0.xml
 create mode 100644 src/main/resources/db/changelog/db.changelog-3.0.xml
 create mode 100644 src/main/resources/db/changelog/db.changelog-4.0.xml
 create mode 100644 src/test/java/com/crossover/techtrial/batch/DailyElectricityAggregatorJobTest.java
 create mode 100644 src/test/java/com/crossover/techtrial/service/DailyElectricityServiceTest.java
 create mode 100644 src/test/java/com/crossover/techtrial/service/HourlyElectricityServiceTest.java
 create mode 100644 src/test/java/com/crossover/techtrial/service/PanelServiceTest.java
 create mode 100644 src/test/java/com/crossover/techtrial/utils/TestUtils.java
 create mode 100644 src/test/resources/application.properties

diff --git a/build.gradle b/build.gradle
index f6cec90..5e3cb1b 100644
--- a/build.gradle
+++ b/build.gradle
@@ -14,6 +14,7 @@ buildscript {
 	}
 }
 
+
 apply plugin: 'java'
 apply plugin: 'eclipse'
 apply plugin: "jacoco"
@@ -26,17 +27,32 @@ group = 'com.crossover'
 version = '0.0.1-SNAPSHOT'
 sourceCompatibility = 1.8
 
+
 repositories {
 	mavenCentral()
 }
 
 
+jacocoTestReport {
+	afterEvaluate {
+		classDirectories = files(classDirectories.files.collect {
+			fileTree(dir: it,
+					exclude: ['com/crossover/techtrial/config/**',
+							  'com/crossover/techtrial/dto/**',
+							  'com/crossover/techtrial/model/**',
+							  'com/crossover/techtrial/CrossSolarApplication**'])
+		})
+	}
+}
+
 dependencies {
 	compile('org.springframework.boot:spring-boot-starter')
 	compile('org.springframework.boot:spring-boot-starter-data-jpa')
 	compile('org.springframework.boot:spring-boot-starter-web')
-	compile('org.springframework.boot:spring-boot-starter-data-rest')
+	compile('net.javacrumbs.shedlock:shedlock-spring:1.0.0')
+	compile('net.javacrumbs.shedlock:shedlock-provider-jdbc-template:1.0.0')
 	compile('com.fasterxml.jackson.core:jackson-core')
+	compile "org.projectlombok:lombok:1.18.0"
 	testCompile('com.h2database:h2')
 	testCompile('org.springframework.boot:spring-boot-starter-aop')
 	compile('org.liquibase:liquibase-core')
diff --git a/src/main/java/com/crossover/techtrial/batch/DailyElectricityAggregatorJob.java b/src/main/java/com/crossover/techtrial/batch/DailyElectricityAggregatorJob.java
new file mode 100644
index 0000000..b5891f0
--- /dev/null
+++ b/src/main/java/com/crossover/techtrial/batch/DailyElectricityAggregatorJob.java
@@ -0,0 +1,84 @@
+package com.crossover.techtrial.batch;
+
+import com.crossover.techtrial.model.DailyElectricity;
+import com.crossover.techtrial.model.HourlyElectricity;
+import com.crossover.techtrial.model.Panel;
+import com.crossover.techtrial.service.DailyElectricityService;
+import com.crossover.techtrial.service.HourlyElectricityService;
+import com.crossover.techtrial.service.PanelService;
+import net.javacrumbs.shedlock.core.SchedulerLock;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
+import org.springframework.scheduling.annotation.Scheduled;
+import org.springframework.stereotype.Component;
+
+import java.time.LocalDate;
+import java.time.LocalDateTime;
+import java.time.LocalTime;
+import java.time.ZoneId;
+import java.util.List;
+import java.util.LongSummaryStatistics;
+
+/**
+ * Job to consolidate on daily bases all the electricity generated.s
+ *
+ */
+@Component
+@ConditionalOnProperty(value = "crosssolar.scheduler.enabled", havingValue = "true", matchIfMissing = true)
+public class DailyElectricityAggregatorJob {
+
+    static final String ZONE_ID = "CET";
+    private static final String CRON = "0 0 0 * * *";
+
+    private final HourlyElectricityService hourlyElectricityService;
+    private final DailyElectricityService dailyElectricityService;
+    private final PanelService panelService;
+
+    public DailyElectricityAggregatorJob(final HourlyElectricityService hourlyElectricityService,
+                                         final DailyElectricityService dailyElectricityService,
+                                         final PanelService panelService) {
+        this.hourlyElectricityService = hourlyElectricityService;
+        this.dailyElectricityService = dailyElectricityService;
+        this.panelService = panelService;
+    }
+
+    @Scheduled(cron = CRON, zone = ZONE_ID)
+    @SchedulerLock(name = "consolidateDailyElectricityGeneration")
+    public void consolidateDailyElectricityGeneration() {
+        process();
+    }
+
+    private void process() {
+        List<Panel> panels = this.panelService.getAll();
+
+        for (Panel panel : panels) {
+            List<HourlyElectricity> hourlyElectricities = this.hourlyElectricityService
+                    .getAllHourlyElectricityByReadingAtBetween(yesterdayAtStartOfDay(), yesterdayAtEndOfDay(), panel);
+
+            if (hourlyElectricities.isEmpty()) {
+                continue;
+            }
+
+            LongSummaryStatistics summaryStatistics = hourlyElectricities.stream()
+                    .mapToLong(HourlyElectricity::getGeneratedElectricity)
+                    .summaryStatistics();
+
+            DailyElectricity dailyElectricity = new DailyElectricity(panel,
+                    summaryStatistics.getSum(),
+                    summaryStatistics.getMin(),
+                    summaryStatistics.getMax(),
+                    summaryStatistics.getAverage(),
+                    yesterdayAtStartOfDay());
+            this.dailyElectricityService.save(dailyElectricity);
+        }
+    }
+
+    private LocalDateTime yesterdayAtStartOfDay() {
+        return LocalDate.now(ZoneId.of(ZONE_ID)).minusDays(1).atStartOfDay();
+    }
+
+    private LocalDateTime yesterdayAtEndOfDay() {
+        LocalDate yesterday = LocalDate.now(ZoneId.of(ZONE_ID)).minusDays(1);
+        return LocalDateTime.of(yesterday, LocalTime.MAX);
+    }
+
+}
diff --git a/src/main/java/com/crossover/techtrial/batch/InitialProcessJob.java b/src/main/java/com/crossover/techtrial/batch/InitialProcessJob.java
new file mode 100644
index 0000000..5657da7
--- /dev/null
+++ b/src/main/java/com/crossover/techtrial/batch/InitialProcessJob.java
@@ -0,0 +1,119 @@
+package com.crossover.techtrial.batch;
+
+import com.crossover.techtrial.dto.DailyElectricityDTO;
+import com.crossover.techtrial.model.DailyElectricity;
+import com.crossover.techtrial.model.InitialProcess;
+import com.crossover.techtrial.model.InitialProcessStatus;
+import com.crossover.techtrial.model.Panel;
+import com.crossover.techtrial.repository.DailyElectricityRepository;
+import com.crossover.techtrial.repository.InitialProcessRepository;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+import org.springframework.boot.CommandLineRunner;
+import org.springframework.jdbc.core.JdbcTemplate;
+import org.springframework.jdbc.core.RowMapper;
+import org.springframework.stereotype.Component;
+
+import java.sql.Date;
+import java.sql.ResultSet;
+import java.sql.SQLException;
+import java.time.LocalDate;
+import java.time.ZoneId;
+import java.util.ArrayList;
+import java.util.List;
+import java.util.Optional;
+
+import static com.crossover.techtrial.batch.DailyElectricityAggregatorJob.ZONE_ID;
+
+/**
+ * Class responsible to verify and process the first initial data.
+ *
+ */
+@Component
+public class InitialProcessJob implements CommandLineRunner {
+
+    private static final Logger logger = LoggerFactory.getLogger(InitialProcessJob.class);
+
+    private static final String SQL_AGGREGATE_DAILY = "select e.panel_id as panel_id, e.reading_at as e_date," +
+            " sum(e.generated_electricity) as e_sum, min(e.generated_electricity) as e_min," +
+            " max(e.generated_electricity) as e_max, avg(e.generated_electricity) as e_avg" +
+            " from hourly_electricity as e group by e.reading_at, e.panel_id";
+
+    private final InitialProcessRepository initialProcessRepository;
+    private final DailyElectricityRepository dailyElectricityRepository;
+    private final JdbcTemplate jdbcTemplate;
+
+    public InitialProcessJob(final InitialProcessRepository initialProcessRepository,
+                             final DailyElectricityRepository dailyElectricityRepository,
+                             final JdbcTemplate jdbcTemplate) {
+        this.initialProcessRepository = initialProcessRepository;
+        this.dailyElectricityRepository = dailyElectricityRepository;
+        this.jdbcTemplate = jdbcTemplate;
+    }
+
+    @Override
+    public void run(String... args) throws Exception {
+        Optional<InitialProcess> initialProcess = this.initialProcessRepository.findTopByOrderById();
+        if (initialProcess.isPresent()) {
+            InitialProcessStatus status = initialProcess.get().getStatus();
+
+            if (status != InitialProcessStatus.FAILED) {
+                return;
+            }
+        }
+
+        InitialProcess savedStatus = updateStatus(null, InitialProcessStatus.STARTED);
+        try {
+            List<DailyElectricityDTO> result = this.jdbcTemplate.query(SQL_AGGREGATE_DAILY, new DailyAggregationRowMapper());
+            if (result.isEmpty())
+                return;
+
+            List<DailyElectricity> dailyElectricities = new ArrayList<>();
+            for (DailyElectricityDTO dto : result) {
+                DailyElectricity daily = new DailyElectricity();
+                daily.setGeneratedElectricityAverage(dto.getAverage().doubleValue());
+                daily.setGeneratedElectricityMax(dto.getMax());
+                daily.setGeneratedElectricityMin(dto.getMin());
+                daily.setGeneratedElectricitySum(dto.getSum());
+                daily.setReadingAt(dto.getDate().atStartOfDay());
+                daily.setPanel(new Panel(dto.getPanelId()));
+
+                dailyElectricities.add(daily);
+            }
+
+            this.dailyElectricityRepository.saveAll(dailyElectricities);
+            updateStatus(savedStatus.getId(), InitialProcessStatus.FINISHED);
+        } catch (Exception ex) {
+            logger.error("The initial daily process failed", ex);
+            updateStatus(savedStatus.getId(), InitialProcessStatus.FAILED);
+        }
+
+    }
+
+    private InitialProcess updateStatus(Long id, InitialProcessStatus status) {
+        return this.initialProcessRepository.save(new InitialProcess(id, status));
+    }
+
+    /**
+     * Row mapper for daily aggregation.
+     *
+     */
+    class DailyAggregationRowMapper implements RowMapper<DailyElectricityDTO> {
+
+        @Override
+        public DailyElectricityDTO mapRow(ResultSet rs, int rowNum) throws SQLException {
+            return new DailyElectricityDTO(
+                    rs.getLong("panel_id"),
+                    toLocalDateTime(rs.getDate("e_date")),
+                    rs.getLong("e_sum"),
+                    rs.getLong("e_avg"),
+                    rs.getLong("e_min"),
+                    rs.getLong("e_max"));
+        }
+
+        private LocalDate toLocalDateTime(Date date) {
+            return date.toLocalDate().atStartOfDay(ZoneId.of(ZONE_ID)).toLocalDate();
+        }
+
+    }
+}
diff --git a/src/main/java/com/crossover/techtrial/config/SchedulerConfiguration.java b/src/main/java/com/crossover/techtrial/config/SchedulerConfiguration.java
new file mode 100644
index 0000000..f9490eb
--- /dev/null
+++ b/src/main/java/com/crossover/techtrial/config/SchedulerConfiguration.java
@@ -0,0 +1,33 @@
+package com.crossover.techtrial.config;
+
+import net.javacrumbs.shedlock.core.LockProvider;
+import net.javacrumbs.shedlock.provider.jdbctemplate.JdbcTemplateLockProvider;
+import net.javacrumbs.shedlock.spring.ScheduledLockConfiguration;
+import net.javacrumbs.shedlock.spring.ScheduledLockConfigurationBuilder;
+import org.springframework.context.annotation.Bean;
+import org.springframework.scheduling.annotation.EnableScheduling;
+import org.springframework.stereotype.Component;
+
+import javax.sql.DataSource;
+import java.time.Duration;
+
+@Component
+@EnableScheduling
+public class SchedulerConfiguration {
+
+    private static final int DURATION_IN_HOURS = 1;
+
+    @Bean
+    public ScheduledLockConfiguration taskScheduler(final LockProvider lockProvider) {
+        return ScheduledLockConfigurationBuilder
+                .withLockProvider(lockProvider)
+                .withPoolSize(10)
+                .withDefaultLockAtMostFor(Duration.ofHours(DURATION_IN_HOURS))
+                .build();
+    }
+
+    @Bean
+    public LockProvider lockProvider(final DataSource dataSource) {
+        return new JdbcTemplateLockProvider(dataSource);
+    }
+}
diff --git a/src/main/java/com/crossover/techtrial/controller/PanelController.java b/src/main/java/com/crossover/techtrial/controller/PanelController.java
index d308f18..3bd3f62 100644
--- a/src/main/java/com/crossover/techtrial/controller/PanelController.java
+++ b/src/main/java/com/crossover/techtrial/controller/PanelController.java
@@ -1,95 +1,94 @@
 package com.crossover.techtrial.controller;
 
-import com.crossover.techtrial.dto.DailyElectricity;
+import com.crossover.techtrial.dto.DailyElectricityDTO;
 import com.crossover.techtrial.model.HourlyElectricity;
 import com.crossover.techtrial.model.Panel;
+import com.crossover.techtrial.service.DailyElectricityService;
 import com.crossover.techtrial.service.HourlyElectricityService;
 import com.crossover.techtrial.service.PanelService;
 import java.util.ArrayList;
 import java.util.List;
-import org.springframework.beans.factory.annotation.Autowired;
+
 import org.springframework.data.domain.Page;
 import org.springframework.data.domain.Pageable;
 import org.springframework.data.web.PageableDefault;
 import org.springframework.http.ResponseEntity;
-import org.springframework.web.bind.annotation.GetMapping;
-import org.springframework.web.bind.annotation.PathVariable;
-import org.springframework.web.bind.annotation.PostMapping;
-import org.springframework.web.bind.annotation.RequestBody;
-import org.springframework.web.bind.annotation.RestController;
+import org.springframework.web.bind.annotation.*;
+import org.springframework.web.util.UriComponentsBuilder;
 
 /**
  * Panel Controller for all Rest APIs related to Panel.
+ *
  * @author Crossover
  *
  */
-
 @RestController
+@RequestMapping("/api")
 public class PanelController {
 
-  @Autowired
-  PanelService panelService;
-  
-  @Autowired
-  HourlyElectricityService hourlyElectricityService;
-  
+  private final PanelService panelService;
+
+  private final HourlyElectricityService hourlyElectricityService;
+
+  private final DailyElectricityService dailyElectricityService;
+
+  public PanelController(final PanelService panelService,
+                         final HourlyElectricityService hourlyElectricityService,
+                         final DailyElectricityService dailyElectricityService) {
+    this.panelService = panelService;
+    this.hourlyElectricityService = hourlyElectricityService;
+    this.dailyElectricityService = dailyElectricityService;
+  }
+
   /**
    * Register a Panel to System and start receiving the electricity statistics.
    * @param panel to register.
    * @return
    */
-  @PostMapping(path = "/api/register")
-  public ResponseEntity<?> registerPanel(@RequestBody Panel panel) {
-    panelService.register(panel);
-    return  ResponseEntity.accepted().build();
+  @PostMapping(path = "/register")
+  public ResponseEntity<Panel> registerPanel(@RequestBody Panel panel) {
+    Panel saved = panelService.register(panel);
+    return ResponseEntity.ok(saved);
   }
-  
+
   /**
-   * Controller Method to save hourly Electricity to Database. 
+   * Controller Method to save hourly Electricity to Database.
    * @param panelSerial Serial number of Panel.
    * @param hourlyElectricity  generated electricity for this panel.
    * @return
    */
-  
-  @PostMapping(path = "/api/panels/{panel-serial}/hourly")
-  public ResponseEntity<?> saveHourlyElectricity(
-      @PathVariable(value = "panel-serial") String panelSerial, 
-      @RequestBody HourlyElectricity hourlyElectricity) {
-    return ResponseEntity.ok(hourlyElectricityService.save(hourlyElectricity));
+
+  @PostMapping(path = "/panels/{panel-serial}/hourly")
+  public ResponseEntity<HourlyElectricity> saveHourlyElectricity(
+          @PathVariable(value = "panel-serial") String panelSerial,
+          @RequestBody HourlyElectricity hourlyElectricity) {
+    return ResponseEntity.ok(hourlyElectricityService.save(hourlyElectricity, panelSerial));
   }
-   
+
   /**
    * Get Hourly Electricity from Previous dates.
    */
-  
-  @GetMapping(path = "/api/panels/{panel-serial}/hourly")
-  public ResponseEntity<?> hourlyElectricity(
-      @PathVariable(value = "banel-serial") String panelSerial,
-      @PageableDefault(size = 5,value = 0) Pageable pageable) {
-    Panel panel = panelService.findBySerial(panelSerial);
-    if (panel == null) {
-      return ResponseEntity.notFound().build(); 
-    }
-    Page<HourlyElectricity> page = hourlyElectricityService.getAllHourlyElectricityByPanelId(
-        panel.getId(), pageable);
+
+  @GetMapping(path = "/panels/{panel-serial}/hourly")
+  public ResponseEntity<Page<HourlyElectricity>> hourlyElectricity(
+          @PathVariable(value = "panel-serial") String panelSerial,
+          @PageableDefault(size = 5, value = 0) Pageable pageable) {
+    Page<HourlyElectricity> page = hourlyElectricityService.getAllHourlyElectricityByPanelId(panelSerial, pageable);
     return ResponseEntity.ok(page);
   }
-  
+
   /**
-   * This end point is used by Front end charts component to plot the daily statistics of 
+   * This end point is used by Front end charts component to plot the daily statistics of
    * electricity generated by this Panel from the day it registered to end of previous day.
    * @param panelSerial is unique serial for this Panel.
    * @return
    */
-  
-  @GetMapping(path = "/api/panels/{panel-serial}/daily")
-  public ResponseEntity<List<DailyElectricity>> allDailyElectricityFromYesterday(
-      @PathVariable(value = "panel-serial") String panelSerial) {
-    List<DailyElectricity> dailyElectricityForPanel = new ArrayList<>();
-    /**
-     * IMPLEMENT THE LOGIC HERE and FEEL FREE TO MODIFY OR ADD CODE TO RELATED CLASSES.
-     * MAKE SURE NOT TO CHANGE THE SIGNATURE OF ANY END POINT. NO PAGINATION IS NEEDED HERE.
-     */
+
+  @GetMapping(path = "/panels/{panel-serial}/daily")
+  public ResponseEntity<List<DailyElectricityDTO>> allDailyElectricityFromYesterday(
+          @PathVariable(value = "panel-serial") String panelSerial) {
+    List<DailyElectricityDTO> dailyElectricityForPanel = this.dailyElectricityService.getAllDailyElectricityByPanelId(panelSerial);
     return ResponseEntity.ok(dailyElectricityForPanel);
   }
+
 }
\ No newline at end of file
diff --git a/src/main/java/com/crossover/techtrial/dto/DailyElectricityDTO.java b/src/main/java/com/crossover/techtrial/dto/DailyElectricityDTO.java
new file mode 100644
index 0000000..82986fb
--- /dev/null
+++ b/src/main/java/com/crossover/techtrial/dto/DailyElectricityDTO.java
@@ -0,0 +1,101 @@
+package com.crossover.techtrial.dto;
+
+import com.fasterxml.jackson.annotation.JsonIgnore;
+
+import java.io.Serializable;
+import java.time.LocalDate;
+
+/**
+ * DailyElectricityDTO class will hold sum, average,minimum and maximum electricity for a given day.
+ *
+ * @author Crossover
+ *
+ */
+public class DailyElectricityDTO implements Serializable {
+
+  private static final long serialVersionUID = 3605549122072628877L;
+
+  @JsonIgnore
+  private Long panelId;
+
+  private LocalDate date;
+
+  private Long sum;
+
+  private Long average;
+
+  private Long min;
+
+  private Long max;
+
+  public DailyElectricityDTO(LocalDate date, Long sum, Long average, Long min, Long max) {
+    this.date = date;
+    this.sum = sum;
+    this.average = average;
+    this.min = min;
+    this.max = max;
+  }
+
+  public DailyElectricityDTO(Long panelId, LocalDate date, Long sum, Long average, Long min, Long max) {
+    this(date, sum, average, min, max);
+    this.panelId = panelId;
+  }
+
+  public DailyElectricityDTO() {
+  }
+
+  public Long getPanelId() {
+    return panelId;
+  }
+
+  public void setPanelId(Long panelId) {
+    this.panelId = panelId;
+  }
+
+  public LocalDate getDate() {
+    return date;
+  }
+
+  public void setDate(LocalDate date) {
+    this.date = date;
+  }
+
+  public Long getSum() {
+    return sum;
+  }
+
+  public void setSum(Long sum) {
+    this.sum = sum;
+  }
+
+  public Long getAverage() {
+    return average;
+  }
+
+  public void setAverage(Long average) {
+    this.average = average;
+  }
+
+  public Long getMin() {
+    return min;
+  }
+
+  public void setMin(Long min) {
+    this.min = min;
+  }
+
+  public Long getMax() {
+    return max;
+  }
+
+  public void setMax(Long max) {
+    this.max = max;
+  }
+
+  @Override
+  public String toString() {
+    return "DailyElectricityDTO [date=" + date + ", sum=" + sum + ", average="
+            + average + ", min=" + min + ", max=" + max + "]";
+  }
+
+}
diff --git a/src/main/java/com/crossover/techtrial/exceptions/GlobalExceptionHandler.java b/src/main/java/com/crossover/techtrial/exceptions/GlobalExceptionHandler.java
index e39127a..cc91100 100644
--- a/src/main/java/com/crossover/techtrial/exceptions/GlobalExceptionHandler.java
+++ b/src/main/java/com/crossover/techtrial/exceptions/GlobalExceptionHandler.java
@@ -1,16 +1,19 @@
 package com.crossover.techtrial.exceptions;
 
-import java.util.AbstractMap;
+import com.crossover.techtrial.service.exceptions.ResourceNotFoundException;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 import org.springframework.http.HttpStatus;
 import org.springframework.http.ResponseEntity;
-import org.springframework.stereotype.Component;
 import org.springframework.web.bind.annotation.ControllerAdvice;
 import org.springframework.web.bind.annotation.ExceptionHandler;
+import org.springframework.web.bind.annotation.ResponseStatus;
+
+import java.util.AbstractMap;
+import java.util.Collections;
+import java.util.Map;
 
 @ControllerAdvice
-@Component
 public class GlobalExceptionHandler {
 
   private static final Logger LOG = LoggerFactory.getLogger(GlobalExceptionHandler.class);
@@ -23,7 +26,13 @@ public class GlobalExceptionHandler {
     // general exception
     LOG.error("Exception: Unable to process this request. ", exception);
     AbstractMap.SimpleEntry<String, String> response =
-        new AbstractMap.SimpleEntry<>("message", "Unable to process this request.");
+            new AbstractMap.SimpleEntry<>("message", "Unable to process this request.");
     return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(response);
   }
+
+  @ResponseStatus(HttpStatus.NOT_FOUND)
+  @ExceptionHandler(ResourceNotFoundException.class)
+  public Map<String, String> handle(ResourceNotFoundException exception) {
+    return Collections.singletonMap("message", exception.getMessage());
+  }
 }
diff --git a/src/main/java/com/crossover/techtrial/model/DailyElectricity.java b/src/main/java/com/crossover/techtrial/model/DailyElectricity.java
new file mode 100644
index 0000000..34e9fae
--- /dev/null
+++ b/src/main/java/com/crossover/techtrial/model/DailyElectricity.java
@@ -0,0 +1,54 @@
+package com.crossover.techtrial.model;
+
+import com.fasterxml.jackson.annotation.JsonIgnore;
+import lombok.*;
+
+import javax.persistence.*;
+import java.io.Serializable;
+import java.time.LocalDateTime;
+
+/**
+ * DailyElectricity is responsible for daily electricity generated by a Panel
+ *
+ */
+@Entity
+@Table(name = "daily_electricity")
+@Data
+@NoArgsConstructor
+public class DailyElectricity implements Serializable {
+    private static final long serialVersionUID = 1505984390621325049L;
+
+    @Id
+    @GeneratedValue(strategy = GenerationType.IDENTITY)
+    private Long id;
+
+    @JsonIgnore
+    @ManyToOne
+    @JoinColumn(name = "panel_id", referencedColumnName = "id")
+    private Panel panel;
+
+    @Column(name = "generated_electricity_sum")
+    private Long generatedElectricitySum;
+
+    @Column(name = "generated_electricity_min")
+    private Long generatedElectricityMin;
+
+    @Column(name = "generated_electricity_max")
+    private Long generatedElectricityMax;
+
+    @Column(name = "generated_electricity_average")
+    private Double generatedElectricityAverage;
+
+    @Column(name = "reading_at")
+    private LocalDateTime readingAt;
+
+    public DailyElectricity(Panel panel, Long generatedElectricitySum, Long generatedElectricityMin,
+                            Long generatedElectricityMax, Double generatedElectricityAverage, LocalDateTime readingAt) {
+        this.panel = panel;
+        this.generatedElectricitySum = generatedElectricitySum;
+        this.generatedElectricityMin = generatedElectricityMin;
+        this.generatedElectricityMax = generatedElectricityMax;
+        this.generatedElectricityAverage = generatedElectricityAverage;
+        this.readingAt = readingAt;
+    }
+}
diff --git a/src/main/java/com/crossover/techtrial/model/InitialProcess.java b/src/main/java/com/crossover/techtrial/model/InitialProcess.java
new file mode 100644
index 0000000..b505bb6
--- /dev/null
+++ b/src/main/java/com/crossover/techtrial/model/InitialProcess.java
@@ -0,0 +1,32 @@
+package com.crossover.techtrial.model;
+
+import lombok.Data;
+import lombok.NoArgsConstructor;
+
+import javax.persistence.*;
+import java.io.Serializable;
+
+/**
+ * Initial process storage representation.
+ *
+ */
+@Entity
+@Table(name = "initial_process")
+@Data
+@NoArgsConstructor
+public class InitialProcess implements Serializable {
+
+    private static final long serialVersionUID = 4823383811404210867L;
+
+    @Id
+    @GeneratedValue(strategy = GenerationType.IDENTITY)
+    private Long id;
+
+    @Enumerated(EnumType.STRING)
+    private InitialProcessStatus status;
+
+    public InitialProcess(Long id, InitialProcessStatus status) {
+        this.id = id;
+        this.status = status;
+    }
+}
diff --git a/src/main/java/com/crossover/techtrial/model/InitialProcessStatus.java b/src/main/java/com/crossover/techtrial/model/InitialProcessStatus.java
new file mode 100644
index 0000000..be2a0db
--- /dev/null
+++ b/src/main/java/com/crossover/techtrial/model/InitialProcessStatus.java
@@ -0,0 +1,11 @@
+package com.crossover.techtrial.model;
+
+/**
+ * Initial process statuses.
+ *
+ */
+public enum InitialProcessStatus {
+    STARTED,
+    FINISHED,
+    FAILED
+}
diff --git a/src/main/java/com/crossover/techtrial/model/Panel.java b/src/main/java/com/crossover/techtrial/model/Panel.java
index 34fb762..5f32e2f 100644
--- a/src/main/java/com/crossover/techtrial/model/Panel.java
+++ b/src/main/java/com/crossover/techtrial/model/Panel.java
@@ -1,18 +1,15 @@
 package com.crossover.techtrial.model;
 
-import java.io.Serializable;
-import javax.persistence.Column;
-import javax.persistence.Entity;
-import javax.persistence.GeneratedValue;
-import javax.persistence.GenerationType;
-import javax.persistence.Id;
-import javax.persistence.Table;
-import javax.validation.constraints.NotNull;
+import com.fasterxml.jackson.annotation.JsonIgnore;
 import org.springframework.lang.Nullable;
 
+import javax.persistence.*;
+import javax.validation.constraints.NotNull;
+import java.io.Serializable;
+
 /**
  * Panel class hold information related to a Solar panel.
- * 
+ *
  * @author Crossover
  *
  */
@@ -22,23 +19,31 @@ public class Panel implements Serializable {
 
   private static final long serialVersionUID = -8527695980909864257L;
 
+  @JsonIgnore
   @Id
   @GeneratedValue(strategy = GenerationType.IDENTITY)
-  Long id;
+  private Long id;
 
   @NotNull
-  @Column(name = "serial")
-  String serial;
+  @Column(name = "serial", unique = true)
+  private String serial;
 
   @Column(name = "longitude")
-  Double longitude;
+  private Double longitude;
 
   @Column(name = "latitude")
-  Double latitude;
+  private Double latitude;
 
   @Nullable
   @Column(name = "brand")
-  String brand;
+  private String brand;
+
+  public Panel() {
+  }
+
+  public Panel(Long id) {
+    this.id = id;
+  }
 
   public Long getId() {
     return id;
@@ -142,6 +147,6 @@ public class Panel implements Serializable {
   @Override
   public String toString() {
     return "Panel [id=" + id + ", serial=" + serial + ", longitude=" + longitude + ", latitude="
-        + latitude + ", brand=" + brand + "]";
+            + latitude + ", brand=" + brand + "]";
   }
 }
diff --git a/src/main/java/com/crossover/techtrial/repository/DailyElectricityRepository.java b/src/main/java/com/crossover/techtrial/repository/DailyElectricityRepository.java
new file mode 100644
index 0000000..a17db6c
--- /dev/null
+++ b/src/main/java/com/crossover/techtrial/repository/DailyElectricityRepository.java
@@ -0,0 +1,11 @@
+package com.crossover.techtrial.repository;
+
+import com.crossover.techtrial.model.DailyElectricity;
+import org.springframework.data.repository.CrudRepository;
+
+import java.util.List;
+
+public interface DailyElectricityRepository extends CrudRepository<DailyElectricity, Long> {
+
+    List<DailyElectricity> findAllByPanelId(Long panelId);
+}
diff --git a/src/main/java/com/crossover/techtrial/repository/HourlyElectricityRepository.java b/src/main/java/com/crossover/techtrial/repository/HourlyElectricityRepository.java
index b883493..e326198 100644
--- a/src/main/java/com/crossover/techtrial/repository/HourlyElectricityRepository.java
+++ b/src/main/java/com/crossover/techtrial/repository/HourlyElectricityRepository.java
@@ -1,17 +1,23 @@
 package com.crossover.techtrial.repository;
 
 import com.crossover.techtrial.model.HourlyElectricity;
+import com.crossover.techtrial.model.Panel;
 import org.springframework.data.domain.Page;
 import org.springframework.data.domain.Pageable;
 import org.springframework.data.repository.PagingAndSortingRepository;
-import org.springframework.data.rest.core.annotation.RestResource;
+
+import java.time.LocalDateTime;
+import java.util.List;
 
 /**
  * HourlyElectricity Repository is for all operations for HourlyElectricity.
+ *
  * @author Crossover
+ *
  */
-@RestResource(exported = false)
-public interface HourlyElectricityRepository 
-    extends PagingAndSortingRepository<HourlyElectricity,Long> {
-  Page<HourlyElectricity> findAllByPanelIdOrderByReadingAtDesc(Long panelId,Pageable pageable);
+public interface HourlyElectricityRepository extends PagingAndSortingRepository<HourlyElectricity, Long> {
+  Page<HourlyElectricity> findAllByPanelId(Long panelId, Pageable pageable);
+
+  List<HourlyElectricity> findByReadingAtBetweenAndPanel(LocalDateTime initialReadingAt, LocalDateTime finalReadingAt, Panel panel);
+
 }
diff --git a/src/main/java/com/crossover/techtrial/repository/InitialProcessRepository.java b/src/main/java/com/crossover/techtrial/repository/InitialProcessRepository.java
new file mode 100644
index 0000000..5c23934
--- /dev/null
+++ b/src/main/java/com/crossover/techtrial/repository/InitialProcessRepository.java
@@ -0,0 +1,11 @@
+package com.crossover.techtrial.repository;
+
+import com.crossover.techtrial.model.InitialProcess;
+import org.springframework.data.jpa.repository.JpaRepository;
+
+import java.util.Optional;
+
+public interface InitialProcessRepository extends JpaRepository<InitialProcess, Long> {
+
+    Optional<InitialProcess> findTopByOrderById();
+}
diff --git a/src/main/java/com/crossover/techtrial/repository/PanelRepository.java b/src/main/java/com/crossover/techtrial/repository/PanelRepository.java
index dcba8f3..434e2ba 100644
--- a/src/main/java/com/crossover/techtrial/repository/PanelRepository.java
+++ b/src/main/java/com/crossover/techtrial/repository/PanelRepository.java
@@ -1,15 +1,20 @@
 package com.crossover.techtrial.repository;
 
 import com.crossover.techtrial.model.Panel;
+import org.springframework.data.jpa.repository.JpaRepository;
 import org.springframework.data.repository.PagingAndSortingRepository;
-import org.springframework.data.rest.core.annotation.RestResource;
+
 /**
  * PanelRepository allows all operations to Panel Entity.
  * @author Crossover
- *
  */
+public interface PanelRepository extends JpaRepository<Panel, Long> {
 
-@RestResource(exported = false)
-public interface PanelRepository extends PagingAndSortingRepository<Panel, Long> {
+  /**
+   * Finds a {@link Panel} by the given serial.
+   *
+   * @param serial The serial
+   * @return {@link Panel}
+   */
   Panel findBySerial(String serial);
 }
diff --git a/src/main/java/com/crossover/techtrial/service/DailyElectricityService.java b/src/main/java/com/crossover/techtrial/service/DailyElectricityService.java
new file mode 100644
index 0000000..2858c7c
--- /dev/null
+++ b/src/main/java/com/crossover/techtrial/service/DailyElectricityService.java
@@ -0,0 +1,17 @@
+package com.crossover.techtrial.service;
+
+import com.crossover.techtrial.dto.DailyElectricityDTO;
+import com.crossover.techtrial.model.DailyElectricity;
+
+import java.util.List;
+
+/**
+ * Services for {@link DailyElectricity}.
+ *
+ */
+public interface DailyElectricityService {
+
+    DailyElectricity save(DailyElectricity dailyElectricity);
+
+    List<DailyElectricityDTO> getAllDailyElectricityByPanelId(String panelSerial);
+}
diff --git a/src/main/java/com/crossover/techtrial/service/DailyElectricityServiceImpl.java b/src/main/java/com/crossover/techtrial/service/DailyElectricityServiceImpl.java
new file mode 100644
index 0000000..d72d841
--- /dev/null
+++ b/src/main/java/com/crossover/techtrial/service/DailyElectricityServiceImpl.java
@@ -0,0 +1,55 @@
+package com.crossover.techtrial.service;
+
+import com.crossover.techtrial.dto.DailyElectricityDTO;
+import com.crossover.techtrial.model.DailyElectricity;
+import com.crossover.techtrial.model.Panel;
+import com.crossover.techtrial.repository.DailyElectricityRepository;
+import com.crossover.techtrial.service.exceptions.ResourceNotFoundException;
+import org.springframework.stereotype.Service;
+
+import java.util.List;
+
+import static java.lang.String.format;
+import static java.util.stream.Collectors.toList;
+
+/**
+ * Implementation of {@link DailyElectricityService}.
+ *
+ */
+@Service
+public class DailyElectricityServiceImpl implements DailyElectricityService {
+
+    private final DailyElectricityRepository dailyElectricityRepository;
+    private final PanelService panelService;
+
+    public DailyElectricityServiceImpl(final DailyElectricityRepository dailyElectricityRepository,
+                                       final PanelService panelService) {
+        this.dailyElectricityRepository = dailyElectricityRepository;
+        this.panelService = panelService;
+    }
+
+    @Override
+    public DailyElectricity save(DailyElectricity dailyElectricity) {
+        return this.dailyElectricityRepository.save(dailyElectricity);
+    }
+
+    @Override
+    public List<DailyElectricityDTO> getAllDailyElectricityByPanelId(String panelSerial) {
+        Panel panel = this.panelService.getBySerial(panelSerial);
+        List<DailyElectricity> entities = this.dailyElectricityRepository.findAllByPanelId(panel.getId());
+
+        if (entities.isEmpty()) {
+            throw new ResourceNotFoundException(format("No daily electricity report found for the panel '%s'", panelSerial));
+        }
+
+        return entities.stream()
+                .map(entity -> new DailyElectricityDTO(
+                                entity.getPanel().getId(),
+                                entity.getReadingAt().toLocalDate(),
+                                entity.getGeneratedElectricitySum(),
+                                entity.getGeneratedElectricityAverage().longValue(),
+                                entity.getGeneratedElectricityMin(),
+                                entity.getGeneratedElectricityMax()))
+                .collect(toList());
+    }
+}
diff --git a/src/main/java/com/crossover/techtrial/service/HourlyElectricityService.java b/src/main/java/com/crossover/techtrial/service/HourlyElectricityService.java
index 70c40b7..fb89637 100644
--- a/src/main/java/com/crossover/techtrial/service/HourlyElectricityService.java
+++ b/src/main/java/com/crossover/techtrial/service/HourlyElectricityService.java
@@ -1,16 +1,25 @@
 package com.crossover.techtrial.service;
 
 import com.crossover.techtrial.model.HourlyElectricity;
+import com.crossover.techtrial.model.Panel;
 import org.springframework.data.domain.Page;
 import org.springframework.data.domain.Pageable;
 
+import java.time.LocalDateTime;
+import java.util.List;
+
 /**
- * HourlyElectricityService interface for all services realted to HourlyElectricity.
+ * HourlyElectricityService interface for all services related to HourlyElectricity.
+ *
  * @author Crossover
  *
  */
 public interface HourlyElectricityService {
-  HourlyElectricity save(HourlyElectricity hourlyElectricity);
-  
-  Page<HourlyElectricity> getAllHourlyElectricityByPanelId(Long panelId, Pageable pageable);
+
+  HourlyElectricity save(HourlyElectricity hourlyElectricity, String panelSerial);
+
+  Page<HourlyElectricity> getAllHourlyElectricityByPanelId(String panelSerial, Pageable pageable);
+
+  List<HourlyElectricity> getAllHourlyElectricityByReadingAtBetween(LocalDateTime initialReadingAt, LocalDateTime finalReadingAt, Panel panel);
+
 }
diff --git a/src/main/java/com/crossover/techtrial/service/HourlyElectricityServiceImpl.java b/src/main/java/com/crossover/techtrial/service/HourlyElectricityServiceImpl.java
index 6634e49..ccdf310 100644
--- a/src/main/java/com/crossover/techtrial/service/HourlyElectricityServiceImpl.java
+++ b/src/main/java/com/crossover/techtrial/service/HourlyElectricityServiceImpl.java
@@ -1,31 +1,53 @@
 package com.crossover.techtrial.service;
 
 import com.crossover.techtrial.model.HourlyElectricity;
+import com.crossover.techtrial.model.Panel;
 import com.crossover.techtrial.repository.HourlyElectricityRepository;
 
-import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.data.domain.Page;
 import org.springframework.data.domain.Pageable;
 import org.springframework.stereotype.Service;
 
+import java.time.LocalDateTime;
+import java.util.List;
+
+import static java.lang.String.format;
+
 /**
  * HourlyElectricityServiceImpl will handle electricity generated by a Panel.
  *
  * @author Crossover
  *
  */
-
 @Service
 public class HourlyElectricityServiceImpl implements HourlyElectricityService {
-  @Autowired
-  HourlyElectricityRepository hourlyElectricityRepository;
-  
-  public HourlyElectricity save(HourlyElectricity hourlyElectricity) {
+
+  private final HourlyElectricityRepository hourlyElectricityRepository;
+  private final PanelService panelService;
+
+  public HourlyElectricityServiceImpl(final HourlyElectricityRepository hourlyElectricityRepository,
+                                      final PanelService panelService) {
+    this.hourlyElectricityRepository = hourlyElectricityRepository;
+    this.panelService = panelService;
+  }
+
+  @Override
+  public HourlyElectricity save(HourlyElectricity hourlyElectricity, String panelSerial) {
+    Panel panel = panelService.getBySerial(panelSerial);
+    hourlyElectricity.setPanel(panel);
+
     return hourlyElectricityRepository.save(hourlyElectricity);
   }
-  
-  public Page<HourlyElectricity> getAllHourlyElectricityByPanelId(Long panelId, Pageable pageable) {
-    return hourlyElectricityRepository.findAllByPanelIdOrderByReadingAtDesc(panelId, pageable);
+
+  @Override
+  public Page<HourlyElectricity> getAllHourlyElectricityByPanelId(String panelSerial, Pageable pageable) {
+    Panel panel = panelService.getBySerial(panelSerial);
+    return hourlyElectricityRepository.findAllByPanelId(panel.getId(), pageable);
+  }
+
+  @Override
+  public List<HourlyElectricity> getAllHourlyElectricityByReadingAtBetween(LocalDateTime initialReadingAt, LocalDateTime finalReadingAt, Panel panel) {
+    return this.hourlyElectricityRepository.findByReadingAtBetweenAndPanel(initialReadingAt, finalReadingAt, panel);
   }
-  
+
 }
\ No newline at end of file
diff --git a/src/main/java/com/crossover/techtrial/service/PanelService.java b/src/main/java/com/crossover/techtrial/service/PanelService.java
index b1ba940..8864086 100644
--- a/src/main/java/com/crossover/techtrial/service/PanelService.java
+++ b/src/main/java/com/crossover/techtrial/service/PanelService.java
@@ -2,19 +2,33 @@ package com.crossover.techtrial.service;
 
 import com.crossover.techtrial.model.Panel;
 
+import java.util.List;
+
 /**
  * PanelService interface for Panels.
- * @author Crossover
  *
+ * @author Crossover
  */
 public interface PanelService {
-  
+
   /**
    * Register a panel for electricity monitoring.
    * @param panel to register with system.
    */
-  
-  void register(Panel panel);
-  
-  Panel findBySerial(String serial);
+  Panel register(Panel panel);
+
+  /**
+   * Find a {@link Panel} by its serial.
+   *
+   * @param serial The serial
+   * @return The {@link Panel}
+   */
+  Panel getBySerial(String serial);
+
+  /**
+   * Returns all panels.
+   *
+   * @return List of {@link Panel}
+   */
+  List<Panel> getAll();
 }
diff --git a/src/main/java/com/crossover/techtrial/service/PanelServiceImpl.java b/src/main/java/com/crossover/techtrial/service/PanelServiceImpl.java
index 48649de..14a618f 100644
--- a/src/main/java/com/crossover/techtrial/service/PanelServiceImpl.java
+++ b/src/main/java/com/crossover/techtrial/service/PanelServiceImpl.java
@@ -2,9 +2,13 @@ package com.crossover.techtrial.service;
 
 import com.crossover.techtrial.model.Panel;
 import com.crossover.techtrial.repository.PanelRepository;
-import org.springframework.beans.factory.annotation.Autowired;
+import com.crossover.techtrial.service.exceptions.ResourceNotFoundException;
 import org.springframework.stereotype.Service;
 
+import java.util.List;
+
+import static java.lang.String.format;
+
 
 /**
  * PanelServiceImpl for panel related handling.
@@ -14,19 +18,33 @@ import org.springframework.stereotype.Service;
 @Service
 public class PanelServiceImpl implements PanelService {
 
-  @Autowired
-  PanelRepository panelRepository;
-  
+  private final PanelRepository panelRepository;
+
+  public PanelServiceImpl(final PanelRepository panelRepository) {
+    this.panelRepository = panelRepository;
+  }
+
   /* (non-Javadoc)
    * @see com.crossover.techtrial.service.PanelService#register(com.crossover.techtrial.model.Panel)
    */
-  
+
   @Override
-  public void register(Panel panel) { 
-    panelRepository.save(panel);
+  public Panel register(Panel panel) {
+    return panelRepository.save(panel);
   }
-  
-  public Panel findBySerial(String serial) {
-    return panelRepository.findBySerial(serial);
+
+  @Override
+  public Panel getBySerial(String serial) {
+    Panel panel = panelRepository.findBySerial(serial);
+    if (panel == null) {
+      throw new ResourceNotFoundException(format("Panel '%s' was not found", serial));
+    }
+
+    return panel;
+  }
+
+  @Override
+  public List<Panel> getAll() {
+    return this.panelRepository.findAll();
   }
 }
diff --git a/src/main/java/com/crossover/techtrial/service/exceptions/ResourceNotFoundException.java b/src/main/java/com/crossover/techtrial/service/exceptions/ResourceNotFoundException.java
new file mode 100644
index 0000000..478894e
--- /dev/null
+++ b/src/main/java/com/crossover/techtrial/service/exceptions/ResourceNotFoundException.java
@@ -0,0 +1,8 @@
+package com.crossover.techtrial.service.exceptions;
+
+public class ResourceNotFoundException extends RuntimeException {
+
+    public ResourceNotFoundException(String message) {
+        super(message);
+    }
+}
diff --git a/src/main/resources/application.properties b/src/main/resources/application.properties
index c7cc890..5b70bbd 100644
--- a/src/main/resources/application.properties
+++ b/src/main/resources/application.properties
@@ -1,8 +1,8 @@
 #PLEASE TRY NOT TO CHANGE SETTINGS AND USE APPROPRIATE ENV VARIABLES and DATABASE NAME AS CONFIGURED BELOW
 #Database connection Parameters
-spring.datasource.url: jdbc:mysql://localhost:3306/crosssolar?createDatabaseIfNotExist=true&useSSL=false
-spring.datasource.username=root
-spring.datasource.password=
+spring.datasource.url: jdbc:mysql://db4free.net:3306/dn_cross_solar?createDatabaseIfNotExist=true&useSSL=false
+spring.datasource.username=negriyd
+spring.datasource.password=zxcvZXCV
 spring.datasource.driver-class-name=com.mysql.jdbc.Driver
 
 spring.jpa.hibernate.ddl-auto=none
@@ -13,4 +13,4 @@ spring.data.rest.base-path=/api
 
 logging.level.root=INFO
 logging.level.org.hibernate.SQL=INFO
-logging.level.org.springframework=INFO
\ No newline at end of file
+logging.level.org.springframework=INFO
diff --git a/src/main/resources/db/changelog/db.changelog-2.0.xml b/src/main/resources/db/changelog/db.changelog-2.0.xml
new file mode 100644
index 0000000..63b1f08
--- /dev/null
+++ b/src/main/resources/db/changelog/db.changelog-2.0.xml
@@ -0,0 +1,48 @@
+<?xml version="1.1" encoding="UTF-8" standalone="no"?>
+<databaseChangeLog xmlns="http://www.liquibase.org/xml/ns/dbchangelog" xmlns:ext="http://www.liquibase.org/xml/ns/dbchangelog-ext" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog-ext http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-ext.xsd http://www.liquibase.org/xml/ns/dbchangelog http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.5.xsd">
+    <changeSet author="negriyd" id="1001122005_create_table_daily_electricity">
+        <createTable tableName="daily_electricity">
+            <column autoIncrement="true" name="id" type="BIGINT">
+                <constraints primaryKey="true" primaryKeyName="pk_daily_electricity"/>
+            </column>
+            <column name="panel_id" type="BIGINT">
+                <constraints nullable="false"
+                             foreignKeyName="fk_daily_panel_id"
+                             references="panel(id)"
+                />
+            </column>
+            <column name="generated_electricity_sum" type="BIGINT"/>
+            <column name="generated_electricity_min" type="BIGINT"/>
+            <column name="generated_electricity_max" type="BIGINT"/>
+            <column name="generated_electricity_average" type="DOUBLE"/>
+            <column name="reading_at" type="datetime"/>
+        </createTable>
+    </changeSet>
+
+    <changeSet author="negriyd" id="1001122005_add_hourly_electricity_foreign_key_constraint">
+        <addForeignKeyConstraint baseColumnNames="panel_id"
+                                 baseTableName="hourly_electricity"
+                                 constraintName="fk_hourly_panel_id"
+                                 referencedColumnNames="id"
+                                 referencedTableName="panel"/>
+    </changeSet>
+
+    <changeSet dbms="mysql" author="negriyd" id="1001122006_alter_table_panel_chance_longitude_latitude">
+        <modifyDataType columnName="longitude"
+                        newDataType="DOUBLE(8,4)"
+                        tableName="panel" />
+
+        <modifyDataType columnName="latitude"
+                        newDataType="DOUBLE(8,4)"
+                        tableName="panel" />
+
+        <modifyDataType columnName="serial"
+                        newDataType="VARCHAR(16)"
+                        tableName="panel" />
+
+        <addUniqueConstraint columnNames="serial"
+                             constraintName="uq_serial"
+                             tableName="panel" />
+    </changeSet>
+
+</databaseChangeLog>
diff --git a/src/main/resources/db/changelog/db.changelog-3.0.xml b/src/main/resources/db/changelog/db.changelog-3.0.xml
new file mode 100644
index 0000000..f3b115e
--- /dev/null
+++ b/src/main/resources/db/changelog/db.changelog-3.0.xml
@@ -0,0 +1,15 @@
+<?xml version="1.1" encoding="UTF-8" standalone="no"?>
+<databaseChangeLog xmlns="http://www.liquibase.org/xml/ns/dbchangelog" xmlns:ext="http://www.liquibase.org/xml/ns/dbchangelog-ext" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog-ext http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-ext.xsd http://www.liquibase.org/xml/ns/dbchangelog http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.5.xsd">
+    <changeSet author="negriyd" id="1001122007_create_table_shedlock">
+        <createTable tableName="shedlock">
+            <column name="name" type="VARCHAR(64)">
+                <constraints primaryKey="true" primaryKeyName="pk_shedlock"/>
+            </column>
+            <column name="lock_until" type="TIMESTAMP(3)"/>
+            <column name="locked_at" type="TIMESTAMP(3)"/>
+            <column name="locked_by" type="VARCHAR(255)"/>
+            <column name="reading_at" type="datetime"/>
+        </createTable>
+    </changeSet>
+
+</databaseChangeLog>
diff --git a/src/main/resources/db/changelog/db.changelog-4.0.xml b/src/main/resources/db/changelog/db.changelog-4.0.xml
new file mode 100644
index 0000000..61c96d2
--- /dev/null
+++ b/src/main/resources/db/changelog/db.changelog-4.0.xml
@@ -0,0 +1,12 @@
+<?xml version="1.1" encoding="UTF-8" standalone="no"?>
+<databaseChangeLog xmlns="http://www.liquibase.org/xml/ns/dbchangelog" xmlns:ext="http://www.liquibase.org/xml/ns/dbchangelog-ext" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog-ext http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-ext.xsd http://www.liquibase.org/xml/ns/dbchangelog http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.5.xsd">
+    <changeSet author="negriyd" id="1001122008_create_table_initial_process">
+        <createTable tableName="initial_process">
+            <column autoIncrement="true" name="id" type="BIGINT">
+                <constraints primaryKey="true" primaryKeyName="pk_initial_process"/>
+            </column>
+            <column name="status" type="ENUM('STARTED','FINISHED','FAILED')"/>
+        </createTable>
+    </changeSet>
+
+</databaseChangeLog>
diff --git a/src/main/resources/db/changelog/db.changelog-master.xml b/src/main/resources/db/changelog/db.changelog-master.xml
index ea61ac5..a99f099 100644
--- a/src/main/resources/db/changelog/db.changelog-master.xml
+++ b/src/main/resources/db/changelog/db.changelog-master.xml
@@ -3,4 +3,7 @@
   xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog
                         http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.4.xsd">
   <include file="db/changelog/db.changelog-1.0.xml"/>
+  <include file="db/changelog/db.changelog-2.0.xml"/>
+  <include file="db/changelog/db.changelog-3.0.xml"/>
+  <include file="db/changelog/db.changelog-4.0.xml"/>
 </databaseChangeLog>
\ No newline at end of file
diff --git a/src/test/java/com/crossover/techtrial/batch/DailyElectricityAggregatorJobTest.java b/src/test/java/com/crossover/techtrial/batch/DailyElectricityAggregatorJobTest.java
new file mode 100644
index 0000000..3bbb4dc
--- /dev/null
+++ b/src/test/java/com/crossover/techtrial/batch/DailyElectricityAggregatorJobTest.java
@@ -0,0 +1,49 @@
+package com.crossover.techtrial.batch;
+
+import com.crossover.techtrial.model.DailyElectricity;
+import com.crossover.techtrial.model.HourlyElectricity;
+import com.crossover.techtrial.model.Panel;
+import com.crossover.techtrial.service.DailyElectricityService;
+import com.crossover.techtrial.service.HourlyElectricityService;
+import com.crossover.techtrial.service.PanelService;
+import org.junit.Before;
+import org.junit.Test;
+
+import java.util.List;
+
+import static com.crossover.techtrial.utils.TestUtils.*;
+import static java.util.Collections.singletonList;
+import static org.mockito.ArgumentMatchers.any;
+import static org.mockito.Mockito.mock;
+import static org.mockito.Mockito.when;
+
+public class DailyElectricityAggregatorJobTest {
+
+    private DailyElectricityAggregatorJob dailyElectricityAggregatorJob;
+    private HourlyElectricityService hourlyElectricityService;
+    private DailyElectricityService dailyElectricityService;
+    private PanelService panelService;
+
+    @Before
+    public void setUp() {
+        this.hourlyElectricityService = mock(HourlyElectricityService.class);
+        this.dailyElectricityService = mock(DailyElectricityService.class);
+        this.panelService = mock(PanelService.class);
+        this.dailyElectricityAggregatorJob = new DailyElectricityAggregatorJob(hourlyElectricityService, dailyElectricityService, panelService);
+    }
+
+    @Test
+    public void testConsolidateDailyElectricityGeneration() {
+        List<Panel> expectedPanels = singletonList(panel());
+        when(this.panelService.getAll()).thenReturn(expectedPanels);
+
+        List<HourlyElectricity> expectedHourly = singletonList(hourlyElectricity());
+        when(this.hourlyElectricityService.getAllHourlyElectricityByReadingAtBetween(any(), any(), any())).thenReturn(expectedHourly);
+
+        DailyElectricity expectedDaily = dailyElectricity();
+        when(this.dailyElectricityService.save(any())).thenReturn(expectedDaily);
+
+        this.dailyElectricityAggregatorJob.consolidateDailyElectricityGeneration();
+    }
+
+}
\ No newline at end of file
diff --git a/src/test/java/com/crossover/techtrial/controller/PanelControllerTest.java b/src/test/java/com/crossover/techtrial/controller/PanelControllerTest.java
index a1deacf..6d74c7a 100644
--- a/src/test/java/com/crossover/techtrial/controller/PanelControllerTest.java
+++ b/src/test/java/com/crossover/techtrial/controller/PanelControllerTest.java
@@ -1,61 +1,113 @@
 package com.crossover.techtrial.controller;
 
+import com.crossover.techtrial.model.HourlyElectricity;
 import com.crossover.techtrial.model.Panel;
-import org.junit.Assert;
-import org.junit.Before;
+import com.fasterxml.jackson.databind.ObjectMapper;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.mockito.Mock;
 import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
 import org.springframework.boot.test.context.SpringBootTest;
 import org.springframework.boot.test.context.SpringBootTest.WebEnvironment;
-import org.springframework.boot.test.web.client.TestRestTemplate;
-import org.springframework.http.HttpEntity;
-import org.springframework.http.HttpHeaders;
-import org.springframework.http.MediaType;
-import org.springframework.http.ResponseEntity;
-import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
+import org.springframework.test.context.TestPropertySource;
+import org.springframework.test.context.junit4.SpringRunner;
 import org.springframework.test.web.servlet.MockMvc;
 
-import org.springframework.test.web.servlet.setup.MockMvcBuilders;
+import static com.crossover.techtrial.utils.TestUtils.hourlyElectricity;
+import static com.crossover.techtrial.utils.TestUtils.panel;
+import static org.hamcrest.Matchers.is;
+import static org.hamcrest.Matchers.notNullValue;
+import static org.springframework.http.MediaType.APPLICATION_JSON;
+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;
+import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;
+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;
+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;
 
 
 /**
  * PanelControllerTest class will test all APIs in PanelController.java.
- * @author Crossover
  *
+ * @author Crossover
  */
-
-@RunWith(SpringJUnit4ClassRunner.class)
+@RunWith(SpringRunner.class)
+@AutoConfigureMockMvc
 @SpringBootTest(webEnvironment = WebEnvironment.RANDOM_PORT)
+@TestPropertySource(properties = "crosssolar.scheduler.enabled=false")
 public class PanelControllerTest {
-  
-  MockMvc mockMvc;
-  
-  @Mock
-  private PanelController panelController;
-  
+
+  private static final String SERIAL_ID = "1234567890123456";
+  private static final String INVALID_SERIAL_ID = "987129387";
+
   @Autowired
-  private TestRestTemplate template;
+  private MockMvc mockMvc;
 
-  @Before
-  public void setup() throws Exception {
-    mockMvc = MockMvcBuilders.standaloneSetup(panelController).build();
-  }
+  @Autowired
+  private ObjectMapper objectMapper;
 
   @Test
   public void testPanelShouldBeRegistered() throws Exception {
-    HttpEntity<Object> panel = getHttpEntity(
-        "{\"serial\": \"232323\", \"longitude\": \"54.123232\"," 
-            + " \"latitude\": \"54.123232\",\"brand\":\"tesla\" }");
-    ResponseEntity<Panel> response = template.postForEntity(
-        "/api/register", panel, Panel.class);
-    Assert.assertEquals(202,response.getStatusCode().value());
+    Panel panel = panel();
+    this.mockMvc.perform(post("/api/register")
+            .contentType(APPLICATION_JSON)
+            .content(objectMapper.writeValueAsString(panel)))
+            .andDo(print())
+            .andExpect(status().isOk())
+            .andExpect(jsonPath("$.brand", is(panel.getBrand())))
+            .andExpect(jsonPath("$.latitude", notNullValue()))
+            .andExpect(jsonPath("$.longitude", notNullValue()))
+            .andExpect(jsonPath("$.serial", is(panel.getSerial())))
+            .andExpect(jsonPath("$.id").doesNotExist());
+  }
+
+  @Test
+  public void testSaveHourlyElectricity() throws Exception {
+    HourlyElectricity hourlyElectricity = hourlyElectricity();
+    this.mockMvc.perform(post("/api/panels/{panel-serial}/hourly", SERIAL_ID)
+            .contentType(APPLICATION_JSON)
+            .content(objectMapper.writeValueAsString(hourlyElectricity)))
+            .andDo(print())
+            .andExpect(status().isOk())
+            .andExpect(jsonPath("$.generatedElectricity", notNullValue()))
+            .andExpect(jsonPath("$.readingAt", notNullValue()));
   }
 
-  private HttpEntity<Object> getHttpEntity(Object body) {
-    HttpHeaders headers = new HttpHeaders();
-    headers.setContentType(MediaType.APPLICATION_JSON);
-    return new HttpEntity<Object>(body, headers);
+  @Test
+  public void testGetHourlyElectricity() throws Exception {
+    this.mockMvc.perform(get("/api/panels/{panel-serial}/hourly", SERIAL_ID)
+            .contentType(APPLICATION_JSON))
+            .andDo(print())
+            .andExpect(status().isOk())
+            .andExpect(jsonPath("$.content[0].generatedElectricity", notNullValue()))
+            .andExpect(jsonPath("$.content[0].readingAt", notNullValue()));
+  }
+
+  @Test
+  public void testGetHourlyElectricityNotFound() throws Exception {
+    this.mockMvc.perform(get("/api/panels/{panel-serial}/hourly", INVALID_SERIAL_ID)
+            .contentType(APPLICATION_JSON))
+            .andDo(print())
+            .andExpect(status().isNotFound());
+  }
+
+  @Test
+  public void testGetAllDailyElectricityFromYesterday() throws Exception {
+    this.mockMvc.perform(get("/api/panels/{panel-serial}/daily", SERIAL_ID)
+            .contentType(APPLICATION_JSON))
+            .andDo(print())
+            .andExpect(status().isOk())
+            .andExpect(jsonPath("$[0].date", notNullValue()))
+            .andExpect(jsonPath("$[0].average", notNullValue()))
+            .andExpect(jsonPath("$[0].min", notNullValue()))
+            .andExpect(jsonPath("$[0].max", notNullValue()))
+            .andExpect(jsonPath("$[0].sum", notNullValue()));
+  }
+
+  @Test
+  public void testGetAllDailyElectricityFromYesterdayNotFound() throws Exception {
+    this.mockMvc.perform(get("/api/panels/{panel-serial}/daily", INVALID_SERIAL_ID)
+            .contentType(APPLICATION_JSON))
+            .andDo(print())
+            .andExpect(status().isNotFound());
   }
 }
diff --git a/src/test/java/com/crossover/techtrial/service/DailyElectricityServiceTest.java b/src/test/java/com/crossover/techtrial/service/DailyElectricityServiceTest.java
new file mode 100644
index 0000000..dbb3bc6
--- /dev/null
+++ b/src/test/java/com/crossover/techtrial/service/DailyElectricityServiceTest.java
@@ -0,0 +1,73 @@
+package com.crossover.techtrial.service;
+
+import com.crossover.techtrial.dto.DailyElectricityDTO;
+import com.crossover.techtrial.model.DailyElectricity;
+import com.crossover.techtrial.repository.DailyElectricityRepository;
+import com.crossover.techtrial.service.exceptions.ResourceNotFoundException;
+import org.junit.Before;
+import org.junit.Test;
+
+import java.util.Collections;
+import java.util.List;
+
+import static com.crossover.techtrial.utils.TestUtils.dailyElectricity;
+import static com.crossover.techtrial.utils.TestUtils.panel;
+import static java.util.Collections.emptyList;
+import static org.junit.Assert.assertEquals;
+import static org.mockito.ArgumentMatchers.any;
+import static org.mockito.Mockito.mock;
+import static org.mockito.Mockito.when;
+
+/**
+ * Unit tests for {@link DailyElectricityService}.
+ *
+ */
+public class DailyElectricityServiceTest {
+
+    private DailyElectricityService dailyElectricityService;
+    private DailyElectricityRepository dailyElectricityRepository;
+
+    @Before
+    public void setUp() {
+        PanelService panelService = mock(PanelService.class);
+        when(panelService.getBySerial(any())).thenReturn(panel());
+
+        this.dailyElectricityRepository = mock(DailyElectricityRepository.class);
+        this.dailyElectricityService = new DailyElectricityServiceImpl(this.dailyElectricityRepository, panelService);
+    }
+
+    @Test
+    public void testSave() {
+        DailyElectricity expected = dailyElectricity();
+        when(this.dailyElectricityRepository.save(any())).thenReturn(expected);
+
+        DailyElectricity result = this.dailyElectricityService.save(expected);
+
+        assertEquals(expected, result);
+    }
+
+    @Test
+    public void testGetAllDailyElectricityByPanelId() {
+        DailyElectricity dailyElectricity = dailyElectricity();
+        List<DailyElectricity> expected = Collections.singletonList(dailyElectricity);
+        when(this.dailyElectricityRepository.findAllByPanelId(any())).thenReturn(expected);
+
+        List<DailyElectricityDTO> result = this.dailyElectricityService.getAllDailyElectricityByPanelId("random-serial");
+
+        for (DailyElectricityDTO dto : result) {
+            assertEquals(dailyElectricity.getGeneratedElectricityAverage().longValue(), dto.getAverage().longValue());
+            assertEquals(dailyElectricity.getGeneratedElectricityMax(), dto.getMax());
+            assertEquals(dailyElectricity.getGeneratedElectricityMin(), dto.getMin());
+            assertEquals(dailyElectricity.getGeneratedElectricitySum(), dto.getSum());
+            assertEquals(dailyElectricity.getReadingAt().toLocalDate(), dto.getDate());
+            assertEquals(dailyElectricity.getPanel().getId(), dto.getPanelId());
+        }
+    }
+
+    @Test(expected = ResourceNotFoundException.class)
+    public void testGetAllDailyElectricityByPanelId_notFound() {
+        when(this.dailyElectricityRepository.findAllByPanelId(any())).thenReturn(emptyList());
+        this.dailyElectricityService.getAllDailyElectricityByPanelId("random-serial");
+    }
+
+}
\ No newline at end of file
diff --git a/src/test/java/com/crossover/techtrial/service/HourlyElectricityServiceTest.java b/src/test/java/com/crossover/techtrial/service/HourlyElectricityServiceTest.java
new file mode 100644
index 0000000..5ff03f4
--- /dev/null
+++ b/src/test/java/com/crossover/techtrial/service/HourlyElectricityServiceTest.java
@@ -0,0 +1,75 @@
+package com.crossover.techtrial.service;
+
+import com.crossover.techtrial.model.HourlyElectricity;
+import com.crossover.techtrial.model.Panel;
+import com.crossover.techtrial.repository.HourlyElectricityRepository;
+import org.junit.Before;
+import org.junit.Test;
+import org.springframework.data.domain.Page;
+import org.springframework.data.domain.PageImpl;
+
+import java.util.List;
+
+import static com.crossover.techtrial.utils.TestUtils.*;
+import static java.time.LocalDate.now;
+import static java.util.Collections.singletonList;
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertFalse;
+import static org.mockito.ArgumentMatchers.any;
+import static org.mockito.Mockito.mock;
+import static org.mockito.Mockito.when;
+
+/**
+ * Unit tests for {@link HourlyElectricityService}.
+ *
+ */
+public class HourlyElectricityServiceTest {
+
+    private HourlyElectricityService hourlyElectricityService;
+    private HourlyElectricityRepository hourlyElectricityRepository;
+
+    @Before
+    public void setUp() {
+        PanelService panelService = mock(PanelService.class);
+        when(panelService.getBySerial(any())).thenReturn(panel());
+
+        this.hourlyElectricityRepository = mock(HourlyElectricityRepository.class);
+        this.hourlyElectricityService = new HourlyElectricityServiceImpl(hourlyElectricityRepository, panelService);
+
+    }
+
+    @Test
+    public void testSave() {
+        HourlyElectricity expected = hourlyElectricity();
+
+        when(this.hourlyElectricityRepository.save(any())).thenReturn(expected);
+        HourlyElectricity result = this.hourlyElectricityService.save(expected, "random-panel-id");
+
+        assertEquals(expected, result);
+    }
+
+    @Test
+    public void testGetAllHourlyElectricityByPanelId() {
+        List<HourlyElectricity> hourlyElectricityList = singletonList(hourlyElectricity());
+        Page<HourlyElectricity> expected = new PageImpl<>(hourlyElectricityList);
+
+        when(this.hourlyElectricityRepository.findAllByPanelId(any(), any())).thenReturn(expected);
+
+        Page<HourlyElectricity> result = this.hourlyElectricityService.getAllHourlyElectricityByPanelId("random-panel-id", pageable());
+
+        assertEquals(expected, result);
+    }
+
+    @Test
+    public void testGetHourlyElectricityByReadingAtBetweenAndPanel() {
+        List<HourlyElectricity> expected = singletonList(hourlyElectricity());
+
+        when(this.hourlyElectricityRepository.findByReadingAtBetweenAndPanel(any(), any(), any())).thenReturn(expected);
+
+        List<HourlyElectricity> result = this.hourlyElectricityService.getAllHourlyElectricityByReadingAtBetween(now().atStartOfDay(), now().atStartOfDay(), new Panel(1L));
+
+        assertFalse(result.isEmpty());
+        assertEquals(expected, result);
+    }
+
+}
\ No newline at end of file
diff --git a/src/test/java/com/crossover/techtrial/service/PanelServiceTest.java b/src/test/java/com/crossover/techtrial/service/PanelServiceTest.java
new file mode 100644
index 0000000..e06b76e
--- /dev/null
+++ b/src/test/java/com/crossover/techtrial/service/PanelServiceTest.java
@@ -0,0 +1,64 @@
+package com.crossover.techtrial.service;
+
+import com.crossover.techtrial.model.Panel;
+import com.crossover.techtrial.repository.PanelRepository;
+import com.crossover.techtrial.service.exceptions.ResourceNotFoundException;
+import org.junit.Before;
+import org.junit.Test;
+
+import java.util.List;
+
+import static com.crossover.techtrial.utils.TestUtils.panel;
+import static java.util.Collections.singletonList;
+import static org.junit.Assert.assertEquals;
+import static org.mockito.ArgumentMatchers.any;
+import static org.mockito.Mockito.mock;
+import static org.mockito.Mockito.when;
+
+/**
+ * Unit tests for {@link PanelService}.
+ *
+ */
+public class PanelServiceTest {
+
+    private PanelService panelService;
+    private PanelRepository panelRepository;
+
+    @Before
+    public void setUp() {
+        panelRepository = mock(PanelRepository.class);
+        this.panelService = new PanelServiceImpl(panelRepository);
+    }
+
+    @Test
+    public void register() {
+        this.panelService.register(panel());
+    }
+
+    @Test
+    public void testFindBySerial() {
+        Panel expected = panel();
+        when(this.panelRepository.findBySerial(any())).thenReturn(expected);
+
+        Panel result = this.panelService.getBySerial(expected.getSerial());
+
+        assertEquals(expected, result);
+    }
+
+    @Test(expected = ResourceNotFoundException.class)
+    public void testFindBySerial_notFound() {
+        when(this.panelRepository.findBySerial(any())).thenReturn(null);
+
+        this.panelService.getBySerial("random-panel-id");
+    }
+
+    @Test
+    public void testGetAll() {
+        List<Panel> expected = singletonList(panel());
+        when(this.panelRepository.findAll()).thenReturn(expected);
+
+        List<Panel> result = this.panelService.getAll();
+
+        assertEquals(expected, result);
+    }
+}
\ No newline at end of file
diff --git a/src/test/java/com/crossover/techtrial/utils/TestUtils.java b/src/test/java/com/crossover/techtrial/utils/TestUtils.java
new file mode 100644
index 0000000..050acaf
--- /dev/null
+++ b/src/test/java/com/crossover/techtrial/utils/TestUtils.java
@@ -0,0 +1,51 @@
+package com.crossover.techtrial.utils;
+
+import com.crossover.techtrial.model.DailyElectricity;
+import com.crossover.techtrial.model.HourlyElectricity;
+import com.crossover.techtrial.model.Panel;
+import org.springframework.data.domain.PageRequest;
+import org.springframework.data.domain.Pageable;
+
+import java.time.LocalDateTime;
+import java.util.Random;
+import java.util.UUID;
+
+public class TestUtils {
+
+    private static Random random = new Random();
+
+    public static Panel panel(String... serialId) {
+        String serial = serialId.length == 0 ? UUID.randomUUID().toString().substring(0, 15) : serialId[0];
+
+        Panel panel = new Panel();
+        panel.setId(random.nextLong());
+        panel.setBrand("Tesla");
+        panel.setLatitude(random.nextDouble());
+        panel.setLongitude(random.nextDouble());
+        panel.setSerial(serial);
+        return panel;
+    }
+
+    public static HourlyElectricity hourlyElectricity() {
+        HourlyElectricity hourlyElectricity = new HourlyElectricity();
+        hourlyElectricity.setId(random.nextLong());
+        hourlyElectricity.setGeneratedElectricity(random.nextLong());
+        hourlyElectricity.setPanel(panel());
+        hourlyElectricity.setReadingAt(LocalDateTime.now());
+        return hourlyElectricity;
+    }
+
+    public static DailyElectricity dailyElectricity() {
+        return new DailyElectricity(panel(),
+                random.nextLong(),
+                random.nextLong(),
+                random.nextLong(),
+                random.nextDouble(),
+                LocalDateTime.now()
+        );
+    }
+
+    public static Pageable pageable() {
+        return PageRequest.of(0, 5);
+    }
+}
diff --git a/src/test/resources/application.properties b/src/test/resources/application.properties
new file mode 100644
index 0000000..9c1a7d4
--- /dev/null
+++ b/src/test/resources/application.properties
@@ -0,0 +1,3 @@
+spring.jpa.show-sql=true
+
+spring.liquibase.change-log=classpath:/db/changelog/db.changelog-master.xml
\ No newline at end of file
-- 
2.9.0.windows.1

